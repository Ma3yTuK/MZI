import { AdobeRGB, CIExyY, CMYK, ColorInfo, HPLuv, HSI, HSL, HSLuv, HSV, HWB, LAB, LCH, LUV, Oklab, Oklch, RGB, SRGB, TextSize, WCAGComplianceLevel, XYZ, YUV } from './types';
/**
 * The Color class represents a color with various color space representations and manipulation methods.
 *
 * The class supports multiple color spaces, including RGB, HSL, HSV, CMYK, LAB, LCH, XYZ, and YUV.
 * It also provides methods for converting between color spaces and generating harmony colors.
 *
 * The class offers various color manipulation methods, such as adjusting lightness, saturation, hue, and alpha.
 * It also provides methods for converting colors to different string representations and retrieving information about the color.
 *
 * The class also includes utility methods for determining the perceived brightness of the color and checking if it is light or dark.
 */
export declare class Color {
    private _rgb;
    private static PRECISION;
    constructor(color: string | RGB | SRGB | HSL | HSV | CMYK | LAB | LCH | LUV | XYZ | YUV | Oklab | Oklch | HSLuv | HPLuv | CIExyY | HSI | HWB | AdobeRGB);
    private convertToRgb;
    get r(): number;
    get g(): number;
    get b(): number;
    get a(): number | undefined;
    set r(value: number);
    set g(value: number);
    set b(value: number);
    set a(value: number | undefined);
    toRgb(): RGB;
    toHex(includeAlpha?: boolean): string;
    toSrgb(): SRGB;
    toHsl(): HSL;
    toHsv(): HSV;
    toHsi(): HSI;
    toHwb(): HWB;
    toLch(): LCH;
    toYuv(): YUV;
    toCmyk(): CMYK;
    toOklab(): Oklab;
    toOklch(): Oklch;
    toHSLuv(): HSLuv;
    toHPLuv(): HPLuv;
    toCIELuv(): LUV;
    toCIExyY(): CIExyY;
    toAdobeRGB(): AdobeRGB;
    toXyz(): XYZ;
    toXyzD50(): XYZ;
    toLab(): LAB;
    toLabD50(): LAB;
    complementary(): [Color, Color];
    analogous(angle?: number): [Color, Color, Color];
    triadic(): [Color, Color, Color];
    tetradic(angle?: number): [Color, Color, Color, Color];
    splitComplementary(angle?: number): [Color, Color, Color];
    monochromatic(count?: number): Color[];
    square(): [Color, Color, Color, Color];
    doubleSplitComplementary(angle?: number): [Color, Color, Color, Color, Color];
    shades(count?: number): Color[];
    tints(count?: number): Color[];
    tones(count?: number): Color[];
    adjustLightness(amount: number): Color;
    adjustSaturation(amount: number): Color;
    adjustHue(amount: number): Color;
    adjustAlpha(amount: number): Color;
    invert(): Color;
    grayscale(): Color;
    mix(color: Color, amount: number): Color;
    static setPrecision(precision: number): void;
    toString(includeAlpha?: boolean): string;
    setAlpha(value: number | undefined): Color;
    getEffectiveAlpha(): number;
    getName(): Promise<string>;
    getInfo(): Promise<ColorInfo>;
    getBrightness(): number;
    isLight(threshold?: number): boolean;
    /**
     * Calculates the relative luminance of the color.
     * @returns The relative luminance value between 0 and 1.
     */
    getRelativeLuminance(): number;
    /**
     * Calculates the contrast ratio between this color and another color.
     * @param otherColor The color to compare against.
     * @returns The contrast ratio between the two colors.
     */
    getContrastRatio(otherColor: Color): number;
    /**
     * Determines the WCAG compliance level for the contrast between this color and another color.
     * @param otherColor The color to compare against.
     * @param size The size of the text ('Normal' or 'Large').
     * @returns An object containing the compliance level and the contrast ratio.
     */
    getWCAGCompliance(otherColor: Color, size: TextSize): {
        level: WCAGComplianceLevel;
        contrastRatio: number;
    };
    equals(other: Color): boolean;
    private roundNumber;
    private roundObject;
}
