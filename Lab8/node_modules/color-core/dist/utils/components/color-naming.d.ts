import { Color } from '../../color';
export interface RGBColor {
    r: number;
    g: number;
    b: number;
}
export interface HSLColor {
    h: number;
    s: number;
    l: number;
}
export interface ColorInfo {
    name: string;
    hex: string;
    rgb: RGBColor;
    hsl: HSLColor;
    luminance: number;
    requestedHex: string;
}
export interface ColorNamingResponse {
    colors: ColorInfo[];
    paletteTitle: string;
}
declare class ColorInfoCache {
    private cache;
    private cacheDuration;
    private useCache;
    /**
     * Sets the color information for a given hex code in the cache if caching is enabled.
     *
     * @param {string} hex - The hex code of the color.
     * @param {ColorInfo} info - The color information to be stored.
     * @return {void} This function does not return anything.
     */
    set(hex: string, info: ColorInfo): void;
    /**
     * Sets the duration for which color information will be cached.
     *
     * @param {number} duration - The duration in milliseconds.
     * @return {void} This function does not return anything.
     */
    setCacheDuration(duration: number): void;
    /**
     * Retrieves the cached ColorInfo object for the given hex code.
     *
     * @param {string} hex - The hex code to retrieve the ColorInfo object for.
     * @return {ColorInfo | null} The cached ColorInfo object if it exists and is not expired, otherwise null.
     */
    get(hex: string): ColorInfo | null;
    /**
     * Enables the caching mechanism by setting the 'useCache' flag to true.
     */
    enableCache(): void;
    /**
     * Disables the cache by setting 'useCache' to false.
     */
    disableCache(): void;
    /**
     * Clears the cache of color information.
     */
    clear(): void;
}
export declare const colorInfoCache: ColorInfoCache;
/**
 * Asynchronously retrieves the name of a color from the Color Pizza API.
 *
 * @param {Color} color - The color object to get the name for.
 * @return {Promise<string>} A promise that resolves to the name of the color, or 'Unknown' if an error occurs.
 */
export declare function getColorName(color: Color): Promise<string>;
/**
 * Asynchronously fetches color information from the ColorNaming API for a given color.
 *
 * @param {Color} color - The color object for which to fetch information.
 * @return {Promise<ColorInfo>} A promise that resolves to the color information.
 * @throws {Error} If the API call fails.
 */
export declare function getColorInfo(color: Color): Promise<ColorInfo>;
export {};
