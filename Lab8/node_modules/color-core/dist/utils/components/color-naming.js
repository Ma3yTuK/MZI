"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorInfoCache = void 0;
exports.getColorName = getColorName;
exports.getColorInfo = getColorInfo;
var axios_1 = __importDefault(require("axios"));
var ColorInfoCache = /** @class */ (function () {
    function ColorInfoCache() {
        this.cache = new Map();
        this.cacheDuration = 5 * 60 * 1000; // 5 minutes
        this.useCache = true;
    }
    /**
     * Sets the color information for a given hex code in the cache if caching is enabled.
     *
     * @param {string} hex - The hex code of the color.
     * @param {ColorInfo} info - The color information to be stored.
     * @return {void} This function does not return anything.
     */
    ColorInfoCache.prototype.set = function (hex, info) {
        if (this.useCache) {
            this.cache.set(hex, { info: info, timestamp: Date.now() });
        }
    };
    /**
     * Sets the duration for which color information will be cached.
     *
     * @param {number} duration - The duration in milliseconds.
     * @return {void} This function does not return anything.
     */
    ColorInfoCache.prototype.setCacheDuration = function (duration) {
        this.cacheDuration = duration;
    };
    /**
     * Retrieves the cached ColorInfo object for the given hex code.
     *
     * @param {string} hex - The hex code to retrieve the ColorInfo object for.
     * @return {ColorInfo | null} The cached ColorInfo object if it exists and is not expired, otherwise null.
     */
    ColorInfoCache.prototype.get = function (hex) {
        if (!this.useCache)
            return null;
        var entry = this.cache.get(hex);
        if (!entry)
            return null;
        if (Date.now() - entry.timestamp > this.cacheDuration) {
            this.cache.delete(hex);
            return null;
        }
        return entry.info;
    };
    /**
     * Enables the caching mechanism by setting the 'useCache' flag to true.
     */
    ColorInfoCache.prototype.enableCache = function () {
        this.useCache = true;
    };
    /**
     * Disables the cache by setting 'useCache' to false.
     */
    ColorInfoCache.prototype.disableCache = function () {
        this.useCache = false;
    };
    /**
     * Clears the cache of color information.
     */
    ColorInfoCache.prototype.clear = function () {
        this.cache.clear();
    };
    return ColorInfoCache;
}());
exports.colorInfoCache = new ColorInfoCache();
/**
 * Asynchronously retrieves the name of a color from the Color Pizza API.
 *
 * @param {Color} color - The color object to get the name for.
 * @return {Promise<string>} A promise that resolves to the name of the color, or 'Unknown' if an error occurs.
 */
function getColorName(color) {
    return __awaiter(this, void 0, void 0, function () {
        var colorInfo, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, getColorInfo(color)];
                case 1:
                    colorInfo = _a.sent();
                    return [2 /*return*/, colorInfo.name];
                case 2:
                    error_1 = _a.sent();
                    console.error('Error fetching color name:', error_1);
                    return [2 /*return*/, 'Unknown'];
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Asynchronously fetches color information from the ColorNaming API for a given color.
 *
 * @param {Color} color - The color object for which to fetch information.
 * @return {Promise<ColorInfo>} A promise that resolves to the color information.
 * @throws {Error} If the API call fails.
 */
function getColorInfo(color) {
    return __awaiter(this, void 0, void 0, function () {
        var hex, cachedInfo, response, colorInfo, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hex = color.toHex().slice(1);
                    cachedInfo = exports.colorInfoCache.get(hex);
                    if (cachedInfo) {
                        return [2 /*return*/, cachedInfo];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios_1.default.get("https://api.color.pizza/v1/?values=".concat(hex))];
                case 2:
                    response = _a.sent();
                    colorInfo = response.data.colors[0];
                    exports.colorInfoCache.set(hex, colorInfo);
                    return [2 /*return*/, colorInfo];
                case 3:
                    error_2 = _a.sent();
                    console.error('Error fetching color info:', error_2);
                    throw new Error('Failed to fetch color information');
                case 4: return [2 /*return*/];
            }
        });
    });
}
