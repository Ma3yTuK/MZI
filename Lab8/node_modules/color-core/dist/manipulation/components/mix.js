"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mix = mix;
var color_1 = require("../../color");
/**
 * Mixes two colors.
 * @param color1 - The first color.
 * @param color2 - The second color.
 * @param amount - The amount of the second color to mix in, from 0 to 1.
 * @returns A new Color instance representing the mixed color.
 */
function mix(color1, color2, amount) {
    var _a, _b;
    var rgb1 = color1.toRgb();
    var rgb2 = color2.toRgb();
    // Clamp amount to be between 0 and 1, or default to 0 if invalid
    var clampedAmount = isNaN(amount) ? 0 : Math.max(0, Math.min(1, amount));
    var mixValue = function (a, b) { return Math.round(a * (1 - clampedAmount) + b * clampedAmount); };
    var mixedColor = {
        r: mixValue(rgb1.r, rgb2.r),
        g: mixValue(rgb1.g, rgb2.g),
        b: mixValue(rgb1.b, rgb2.b)
    };
    // Handle alpha mixing
    if (rgb1.a !== undefined || rgb2.a !== undefined) {
        var alpha1 = (_a = rgb1.a) !== null && _a !== void 0 ? _a : 1;
        var alpha2 = (_b = rgb2.a) !== null && _b !== void 0 ? _b : 1;
        mixedColor.a = alpha1 * (1 - clampedAmount) + alpha2 * clampedAmount;
    }
    return new color_1.Color(mixedColor);
}
