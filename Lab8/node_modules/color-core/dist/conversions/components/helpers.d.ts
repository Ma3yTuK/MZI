import { LCH, LUV, XYZ } from '../../types';
/**
 * Calculates the Y value in the CIELAB color space based on the given L value.
 *
 * @param {number} l - The L value representing the lightness.
 * @return {number} The calculated Y value.
 */
export declare function lToY(l: number): number;
/**
 * Calculates the lightness value (L) in the CIELAB color space based on the given Y value.
 *
 * @param {number} y - The Y value representing the lightness.
 * @return {number} The calculated lightness value (L).
 */
export declare function yToL(y: number): number;
/**
 * Calculates the distance from the origin on a line defined by a slope and intercept.
 *
 * @param {number} slope - The slope of the line.
 * @param {number} intercept - The intercept of the line.
 * @return {number} The distance from the origin.
 */
export declare function distanceFromOrigin(slope: number, intercept: number): number;
/**
 * Calculates the distance from the origin on a line defined by a slope and intercept.
 *
 * @param {number} slope - The slope of the line.
 * @param {number} intercept - The intercept of the line.
 * @param {number} angle - The angle of the line in radians.
 * @return {number} The distance from the origin. If the distance is negative, returns Infinity.
 */
export declare function distanceFromOriginAngle(slope: number, intercept: number, angle: number): number;
/**
 * Calculates the maximum chroma value in the HSLuv color space.
 *
 * @param {number} l - The lightness value.
 * @param {number} h - The hue value.
 * @return {number} The maximum chroma value.
 */
export declare function calcMaxChromaHsluv(l: number, h: number): number;
/**
 * Calculates the maximum chroma value for a given set of lines in the HPLuv color space.
 *
 * @param {number[][]} lines - An array of lines, each represented by an array of two numbers.
 * @return {number} The maximum chroma value.
 */
export declare function calcMaxChromaHpluv(lines: number[][]): number;
/**
 * Calculates the bounding lines for a given lightness value.
 *
 * @param {number} l - The lightness value.
 * @return {number[][]} An array of lines, each represented by an array of two numbers.
 */
export declare function calculateBoundingLines(l: number): number[][];
/**
 * Converts a color from the LUV color space to the LCH color space.
 *
 * @param {LUV} luv - The LUV color to convert.
 * @return {LCH} The converted LCH color.
 */
export declare function luvToLch(luv: LUV): LCH;
/**
 * Converts XYZ to LUV.
 * @param xyz - The XYZ color to convert.
 * @returns The converted LUV color.
 */
export declare function xyzToLuv(xyz: XYZ): LUV;
/**
 * Converts LCH to LUV.
 * @param lch - The LCH color to convert.
 * @returns The converted LUV color.
 */
export declare function lchToLuv(lch: LCH): LUV;
/**
 * Converts LUV to XYZ.
 * @param luv - The LUV color to convert.
 * @returns The converted XYZ color.
 */
export declare function luvToXyz(luv: LUV): XYZ;
