"use strict";
/**
 * Conversion functions between LAB, XYZ, and RGB color spaces.
 * Implements conversions as specified by CIE standards.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.xyzToLab = xyzToLab;
exports.labToXyz = labToXyz;
exports.rgbToLab = rgbToLab;
exports.labToRgb = labToRgb;
exports.rgbToLabD50 = rgbToLabD50;
exports.labD50ToRgb = labD50ToRgb;
var constants_1 = require("./constants");
var xyz_1 = require("./xyz");
// CIE standard values
var epsilon = 216 / 24389; // Intent of the CIE standard
var kappa = 24389 / 27; // Intent of the CIE standard
/**
 * Converts XYZ to LAB color space.
 * @param xyz - The XYZ color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The LAB color values.
 */
function xyzToLab(xyz, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var wp = whitePoint === 'D50' ? constants_1.D50 : constants_1.D65;
    var x = xyz.x, y = xyz.y, z = xyz.z;
    // Normalize XYZ values against reference white
    var xr = x / wp.x;
    var yr = y / wp.y;
    var zr = z / wp.z;
    // Apply the LAB conversion formula
    var fx = xr > epsilon ? Math.cbrt(xr) : (kappa * xr + 16) / 116;
    var fy = yr > epsilon ? Math.cbrt(yr) : (kappa * yr + 16) / 116;
    var fz = zr > epsilon ? Math.cbrt(zr) : (kappa * zr + 16) / 116;
    var L = 116 * fy - 16;
    var a = 500 * (fx - fy);
    var b = 200 * (fy - fz);
    return { l: L, a: a, b: b };
}
/**
 * Converts LAB to XYZ color space.
 * @param lab - The LAB color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The XYZ color values.
 */
function labToXyz(lab, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var wp = whitePoint === 'D50' ? constants_1.D50 : constants_1.D65;
    var L = lab.l, a = lab.a, b = lab.b;
    var fy = (L + 16) / 116;
    var fx = a / 500 + fy;
    var fz = fy - b / 200;
    var xr = Math.pow(fx, 3) > epsilon ? Math.pow(fx, 3) : (116 * fx - 16) / kappa;
    var yr = L > kappa * epsilon ? Math.pow(((L + 16) / 116), 3) : L / kappa;
    var zr = Math.pow(fz, 3) > epsilon ? Math.pow(fz, 3) : (116 * fz - 16) / kappa;
    return {
        x: xr * wp.x,
        y: yr * wp.y,
        z: zr * wp.z,
        whitePoint: whitePoint
    };
}
/**
 * Converts RGB to LAB color space.
 * @param rgb - The RGB color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The LAB color values.
 */
function rgbToLab(rgb, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var xyz = (0, xyz_1.rgbToXyz)(rgb, whitePoint);
    return xyzToLab(xyz, whitePoint);
}
/**
 * Converts LAB to RGB color space.
 * @param lab - The LAB color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The RGB color values.
 */
function labToRgb(lab, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var xyz = labToXyz(lab, whitePoint);
    return (0, xyz_1.xyzToRgb)(xyz, whitePoint);
}
/**
 * Converts RGB to LAB color space using the D50 white point.
 * @param rgb - The RGB color values.
 * @returns The LAB color values using the D50 white point.
 */
function rgbToLabD50(rgb) {
    var xyzD50 = (0, xyz_1.rgbToXyzD50)(rgb);
    return xyzToLab(xyzD50, 'D50');
}
/**
 * Converts LAB to RGB color space using the D50 white point.
 * @param lab - The LAB color values.
 * @returns The RGB color values.
 */
function labD50ToRgb(lab) {
    var xyzD50 = labToXyz(lab, 'D50');
    return (0, xyz_1.xyzToRgb)(xyzD50, 'D50');
}
