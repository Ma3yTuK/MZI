"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.oklabToRgb = oklabToRgb;
exports.rgbToOklab = rgbToOklab;
var linear_srgb_srgb_1 = require("./linear-srgb-srgb");
var oklab_linear_srgb_1 = require("./oklab-linear-srgb");
/**
 * Converts Oklab color values to RGB.
 * @param {Oklab} oklab - An object with L, a, and b properties.
 * @returns {RGB} An object with r, g, and b properties.
 * @throws {Error} If the input is not a valid Oklab object.
 */
function oklabToRgb(oklab) {
    if (typeof oklab !== 'object' || oklab === null) {
        throw new Error('Input must be an object');
    }
    var L = oklab.L, a = oklab.a, b = oklab.b;
    if (typeof L !== 'number' || typeof a !== 'number' || typeof b !== 'number') {
        throw new Error('Oklab values must be numbers');
    }
    var _a = (0, oklab_linear_srgb_1.oklabToLinearSrgb)(L, a, b), r_linear = _a[0], g_linear = _a[1], b_linear = _a[2];
    return {
        r: (0, linear_srgb_srgb_1.linearSrgbToSrgb)(r_linear),
        g: (0, linear_srgb_srgb_1.linearSrgbToSrgb)(g_linear),
        b: (0, linear_srgb_srgb_1.linearSrgbToSrgb)(b_linear)
    };
}
/**
 * Converts RGB values to Oklab color space.
 * @param {RGB} rgb - An object with r, g, and b properties.
 * @returns {Oklab} An object with L, a, and b properties.
 * @throws {Error} If the input is not a valid RGB object or if RGB values are out of range.
 */
function rgbToOklab(rgb) {
    if (typeof rgb !== 'object' || rgb === null) {
        throw new Error('Input must be an object');
    }
    var r = rgb.r, g = rgb.g, b = rgb.b;
    if (typeof r !== 'number' || typeof g !== 'number' || typeof b !== 'number') {
        throw new Error('RGB values must be numbers');
    }
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
        throw new Error('RGB values must be between 0 and 255');
    }
    var r_linear = (0, linear_srgb_srgb_1.srgbToLinearSrgb)(r);
    var g_linear = (0, linear_srgb_srgb_1.srgbToLinearSrgb)(g);
    var b_linear = (0, linear_srgb_srgb_1.srgbToLinearSrgb)(b);
    return (0, oklab_linear_srgb_1.linearSrgbToOklab)(r_linear, g_linear, b_linear);
}
