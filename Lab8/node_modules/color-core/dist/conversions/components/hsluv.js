"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hsluvToRgb = hsluvToRgb;
exports.rgbToHSLuv = rgbToHSLuv;
exports.hsluvToLch = hsluvToLch;
exports.lchToHsluv = lchToHsluv;
var helpers_1 = require("./helpers");
var xyz_1 = require("./xyz");
/**
 * Rounds an RGB value to the nearest integer and clamps it between 0 and 255.
 * @param value - The RGB value to round and clamp.
 * @returns The rounded and clamped RGB value.
 */
function roundAndClampRgb(value) {
    return Math.max(0, Math.min(255, Math.round(value)));
}
/**
 * Converts HSLuv color to RGB.
 * @param hsluv - The HSLuv color to convert.
 * @returns The converted RGB color.
 */
function hsluvToRgb(hsluv) {
    // Handle edge cases
    if (hsluv.l === 0)
        return { r: 0, g: 0, b: 0 };
    if (hsluv.l === 100)
        return { r: 255, g: 255, b: 255 };
    var lch = hsluvToLch(hsluv);
    var luv = (0, helpers_1.lchToLuv)(lch);
    var xyz = (0, helpers_1.luvToXyz)(luv);
    var rgb = (0, xyz_1.xyzToRgb)(xyz);
    // Round and clamp RGB values
    return {
        r: roundAndClampRgb(rgb.r),
        g: roundAndClampRgb(rgb.g),
        b: roundAndClampRgb(rgb.b)
    };
}
/**
 * Converts RGB color to HSLuv.
 * @param rgb - The RGB color to convert.
 * @returns The converted HSLuv color.
 */
function rgbToHSLuv(rgb) {
    // Handle edge cases
    if (rgb.r === 0 && rgb.g === 0 && rgb.b === 0)
        return { h: 0, s: 0, l: 0 };
    if (rgb.r === 255 && rgb.g === 255 && rgb.b === 255)
        return { h: 0, s: 0, l: 100 };
    var xyz = (0, xyz_1.rgbToXyz)(rgb);
    var luv = (0, helpers_1.xyzToLuv)(xyz);
    var lch = (0, helpers_1.luvToLch)(luv);
    return lchToHsluv(lch);
}
/**
 * Converts HSLuv to LCH.
 * @param hsluv - The HSLuv color to convert.
 * @returns The converted LCH color.
 */
function hsluvToLch(hsluv) {
    if (hsluv.l > 99.9999999) {
        return { l: 100, c: 0, h: hsluv.h };
    }
    if (hsluv.l < 0.00000001) {
        return { l: 0, c: 0, h: hsluv.h };
    }
    var l = hsluv.l;
    var max = (0, helpers_1.calcMaxChromaHsluv)(l, hsluv.h);
    var c = max / 100 * hsluv.s;
    return { l: l, c: c, h: hsluv.h };
}
/**
 * Converts LCH to HSLuv.
 * @param lch - The LCH color to convert.
 * @returns The converted HSLuv color.
 */
function lchToHsluv(lch) {
    if (lch.l > 99.9999999) {
        return { h: lch.h, s: 0, l: 100 };
    }
    if (lch.l < 0.00000001) {
        return { h: lch.h, s: 0, l: 0 };
    }
    var max = (0, helpers_1.calcMaxChromaHsluv)(lch.l, lch.h);
    var s = lch.c / max * 100;
    return { h: lch.h, s: Math.min(s, 100), l: lch.l };
}
