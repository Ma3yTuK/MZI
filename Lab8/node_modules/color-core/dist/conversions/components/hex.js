"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rgbToHex = rgbToHex;
exports.hexToRgb = hexToRgb;
/**
 * Converts RGB values to a hex color code.
 * @param {RGB} rgb - An object with r, g, and b properties, and an optional a property.
 * @param {boolean} [includeAlpha=false] - Whether to include the alpha channel in the hex string.
 * @returns {string} The hex color code.
 * @throws {Error} If the input is not a valid RGB object or if RGB values are out of range.
 */
function rgbToHex(rgb, includeAlpha) {
    if (includeAlpha === void 0) { includeAlpha = false; }
    if (typeof rgb !== 'object' || rgb === null) {
        throw new Error('Input must be an object');
    }
    var r = rgb.r, g = rgb.g, b = rgb.b, a = rgb.a;
    if (typeof r !== 'number' || typeof g !== 'number' || typeof b !== 'number') {
        throw new Error('RGB values must be numbers');
    }
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
        throw new Error('RGB values must be between 0 and 255');
    }
    if (includeAlpha && a !== undefined && (typeof a !== 'number' || a < 0 || a > 1)) {
        throw new Error('Alpha value must be a number between 0 and 1');
    }
    var toHex = function (value) { return Math.round(value).toString(16).padStart(2, '0'); };
    var hex = "#".concat(toHex(r)).concat(toHex(g)).concat(toHex(b));
    if (includeAlpha && a !== undefined) {
        var alphaHex = void 0;
        if (a <= 0) {
            alphaHex = '00';
        }
        else if (a >= 0.995) {
            alphaHex = 'ff';
        }
        else {
            alphaHex = toHex(Math.round(a * 255));
        }
        hex += alphaHex;
    }
    return hex;
}
/**
 * Converts a hex color code to RGB values.
 * @param {string} hex - The hex color code.
 * @returns {RGB} An object with r, g, and b properties, and an optional a property if the input includes alpha.
 * @throws {Error} If the input is not a valid hex color code.
 */
function hexToRgb(hex) {
    if (typeof hex !== 'string') {
        throw new Error('Input must be a string');
    }
    var trimmedHex = hex.replace('#', '').trim();
    if (!/^[0-9A-Fa-f]{3}$|^[0-9A-Fa-f]{6}$|^[0-9A-Fa-f]{8}$/.test(trimmedHex)) {
        throw new Error('Invalid hex color format');
    }
    var expandedHex;
    if (trimmedHex.length === 3) {
        expandedHex = trimmedHex
            .split('')
            .map(function (char) { return char + char; })
            .join('');
    }
    else {
        expandedHex = trimmedHex;
    }
    var r = parseInt(expandedHex.slice(0, 2), 16);
    var g = parseInt(expandedHex.slice(2, 4), 16);
    var b = parseInt(expandedHex.slice(4, 6), 16);
    var rgb = { r: r, g: g, b: b };
    if (expandedHex.length === 8) {
        var a = parseInt(expandedHex.slice(6, 8), 16) / 255;
        rgb.a = parseFloat(a.toFixed(3)); // Round to 3 decimal places
    }
    return rgb;
}
