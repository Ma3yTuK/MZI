"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rgbToCIELuv = rgbToCIELuv;
exports.xyzToCIELuv = xyzToCIELuv;
exports.cieLuvToRgb = cieLuvToRgb;
exports.cieLuvToXyz = cieLuvToXyz;
var constants_1 = require("./constants");
var xyz_1 = require("./xyz");
function calculateUPrime(X, Y, Z) {
    var denominator = X + 15 * Y + 3 * Z;
    return denominator === 0 ? 0 : (4 * X) / denominator;
}
function calculateVPrime(X, Y, Z) {
    var denominator = X + 15 * Y + 3 * Z;
    return denominator === 0 ? 0 : (9 * Y) / denominator;
}
function rgbToCIELuv(rgb) {
    var xyz = (0, xyz_1.rgbToXyz)(rgb);
    return xyzToCIELuv(xyz);
}
function xyzToCIELuv(xyz) {
    var X = xyz.x, Y = xyz.y, Z = xyz.z;
    var yr = Y / constants_1.D65.y;
    // Calculate L
    var L = yr > constants_1.constants.epsilonlow ? 116 * Math.pow(yr, 1 / 3) - 16 : constants_1.constants.kappa * yr;
    // Calculate u' and v' for both the color and the reference white
    var uPrime = calculateUPrime(X, Y, Z);
    var vPrime = calculateVPrime(X, Y, Z);
    var uPrimeR = calculateUPrime(constants_1.D65.x, constants_1.D65.y, constants_1.D65.z);
    var vPrimeR = calculateVPrime(constants_1.D65.x, constants_1.D65.y, constants_1.D65.z);
    // Calculate u and v
    var u = 13 * L * (uPrime - uPrimeR);
    var v = 13 * L * (vPrime - vPrimeR);
    return { L: L, u: u, v: v };
}
function cieLuvToRgb(luv) {
    var xyz = cieLuvToXyz(luv);
    return (0, xyz_1.xyzToRgb)(xyz);
}
function cieLuvToXyz(luv) {
    var L = luv.L, u = luv.u, v = luv.v;
    if (L === 0) {
        return { x: 0, y: 0, z: 0, whitePoint: 'D65' };
    }
    var uPrimeR = calculateUPrime(constants_1.D65.x, constants_1.D65.y, constants_1.D65.z);
    var vPrimeR = calculateVPrime(constants_1.D65.x, constants_1.D65.y, constants_1.D65.z);
    var uPrime = (u / (13 * L)) + uPrimeR;
    var vPrime = (v / (13 * L)) + vPrimeR;
    var Y = L > constants_1.constants.kappa * constants_1.constants.epsilonlow
        ? Math.pow((L + 16) / 116, 3)
        : L / constants_1.constants.kappa;
    var X = Y * ((9 * uPrime) / (4 * vPrime));
    var Z = Y * ((12 - 3 * uPrime - 20 * vPrime) / (4 * vPrime));
    return {
        x: Math.max(0, X),
        y: Math.max(0, Y),
        z: Math.max(0, Z),
        whitePoint: 'D65'
    };
}
