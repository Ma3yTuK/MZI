"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.labToLch = labToLch;
exports.lchToLab = lchToLab;
exports.xyzToLch = xyzToLch;
exports.lchToXyz = lchToXyz;
exports.rgbToLch = rgbToLch;
exports.lchToRgb = lchToRgb;
var constants_1 = require("./constants");
var lab_1 = require("./lab");
var xyz_1 = require("./xyz");
/**
 * Converts LAB color to LCH color.
 * @param lab - The LAB color values.
 * @returns The LCH color values.
 */
function labToLch(lab) {
    var l = lab.l, a = lab.a, b = lab.b;
    var c = Math.sqrt(a * a + b * b);
    var h = Math.atan2(b, a) * (180 / Math.PI);
    if (h < 0) {
        h += 360;
    }
    // For extremely low chroma, set hue to 0
    if (c < constants_1.constants.epsilonhigh) {
        h = 0;
    }
    return { l: l, c: c, h: h };
}
/**
 * Converts LCH color to LAB color.
 * @param lch - The LCH color values.
 * @returns The LAB color values.
 */
function lchToLab(lch) {
    var l = lch.l, c = lch.c, h = lch.h;
    var hRadians = h * (Math.PI / 180);
    return {
        l: l,
        a: c * Math.cos(hRadians),
        b: c * Math.sin(hRadians)
    };
}
/**
 * Converts XYZ color to LCH color.
 * @param xyz - The XYZ color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The LCH color values.
 */
function xyzToLch(xyz, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var lab = (0, lab_1.xyzToLab)(xyz, whitePoint);
    return labToLch(lab);
}
/**
 * Converts LCH color to XYZ color.
 * @param lch - The LCH color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The XYZ color values.
 */
function lchToXyz(lch, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var lab = lchToLab(lch);
    return (0, lab_1.labToXyz)(lab, whitePoint);
}
/**
 * Converts RGB color to LCH color.
 * @param rgb - The RGB color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The LCH color values.
 */
function rgbToLch(rgb, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var EPSILON = 1e-4;
    // Handle black separately
    if (rgb.r === 0 && rgb.g === 0 && rgb.b === 0) {
        return { l: 0, c: 0, h: 0 };
    }
    var xyz = (0, xyz_1.rgbToXyz)(rgb, whitePoint);
    var lab = (0, lab_1.xyzToLab)(xyz, whitePoint);
    var l = lab.l, a = lab.a, b = lab.b;
    var c = Math.sqrt(a * a + b * b);
    var h = Math.atan2(b, a) * (180 / Math.PI);
    // Normalize hue to 0-360 range
    if (h < 0) {
        h += 360;
    }
    // Force hue to 0 if the lightness is 100
    if (Math.abs(l - 100) < EPSILON) {
        h = 0;
    }
    // Handle very low chroma
    if (c < EPSILON) {
        c = 0;
        h = 0;
    }
    // Ensure l is within 0-100 range
    l = Math.max(0, Math.min(100, l));
    return { l: l, c: c, h: h };
}
/**
 * Converts LCH color to RGB color.
 * @param lch - The LCH color values.
 * @param whitePoint - The white point to use (default: 'D65').
 * @returns The RGB color values.
 */
function lchToRgb(lch, whitePoint) {
    if (whitePoint === void 0) { whitePoint = 'D65'; }
    var l = lch.l, c = lch.c, h = lch.h;
    // Ensure l is within 0-100 range
    l = Math.max(0, Math.min(100, l));
    // Handle black
    if (l === 0) {
        return { r: 0, g: 0, b: 0 };
    }
    // Handle white or near-white
    if (Math.abs(l - 100) < constants_1.constants.epsilonM && c < constants_1.constants.epsilonM) {
        return { r: 255, g: 255, b: 255 };
    }
    // Ensure c is non-negative
    c = Math.max(0, c);
    // Normalize h to 0-360 range
    h = ((h % 360) + 360) % 360;
    // Convert LCH to LAB
    var hRadians = h * (Math.PI / 180);
    var a = c * Math.cos(hRadians);
    var b = c * Math.sin(hRadians);
    var lab = { l: l, a: a, b: b };
    var xyz = (0, lab_1.labToXyz)(lab, whitePoint);
    var rgb = (0, xyz_1.xyzToRgb)(xyz, whitePoint);
    // Clamp RGB values to 0-255 range
    return {
        r: Math.round(Math.max(0, Math.min(255, rgb.r))),
        g: Math.round(Math.max(0, Math.min(255, rgb.g))),
        b: Math.round(Math.max(0, Math.min(255, rgb.b)))
    };
}
