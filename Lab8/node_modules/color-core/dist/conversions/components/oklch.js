"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rgbToOklch = rgbToOklch;
exports.rgbToRawOklch = rgbToRawOklch;
exports.oklchToRgb = oklchToRgb;
var oklab_1 = require("./oklab");
/**
 * Converts RGB values to formatted Oklch color space.
 * @param {RGB} rgb - An object with r, g, and b properties.
 * @returns {Oklch} An object with L (percentage), C and h (full numbers) properties.
 * @throws {Error} If the input is not a valid RGB object or if RGB values are out of range.
 */
function rgbToOklch(rgb) {
    var oklab = (0, oklab_1.rgbToOklab)(rgb);
    var L = oklab.L, a = oklab.a, b = oklab.b;
    var C = Math.sqrt(a * a + b * b);
    var h = (Math.atan2(b, a) * 180) / Math.PI;
    // Ensure h is always between 0 and 360
    h = ((h % 360) + 360) % 360;
    // Handle the case where C is very close to zero
    if (C < 1e-6) {
        h = 0;
    }
    return {
        L: Number((L * 100).toFixed(2)),
        C: Number((C * 100).toFixed(4)),
        h: Number(h.toFixed(2))
    };
}
/**
 * Converts RGB values to raw Oklch color space.
 * @param {RGB} rgb - An object with r, g, and b properties.
 * @returns {RawOklch} An object with L, C, and h properties in raw decimal form.
 * @throws {Error} If the input is not a valid RGB object or if RGB values are out of range.
 */
function rgbToRawOklch(rgb) {
    var oklab = (0, oklab_1.rgbToOklab)(rgb);
    var L = oklab.L, a = oklab.a, b = oklab.b;
    var C = Math.sqrt(a * a + b * b);
    var h = (Math.atan2(b, a) * 180) / Math.PI;
    // Ensure h is always between 0 and 360
    h = ((h % 360) + 360) % 360;
    // Handle the case where C is very close to zero
    if (C < 1e-6) {
        h = 0;
    }
    return { L: L, C: C, h: h };
}
/**
 * Converts Oklch color values to RGB.
 * @param {Oklch} oklch - An object with L, C, and h properties.
 * @returns {RGB} An object with r, g, and b properties.
 * @throws {Error} If the input is not a valid Oklch object.
 */
function oklchToRgb(oklch) {
    if (typeof oklch !== 'object' || oklch === null) {
        throw new Error('Input must be an object');
    }
    var L = oklch.L, C = oklch.C, h = oklch.h;
    if (typeof L !== 'number' || typeof C !== 'number' || typeof h !== 'number') {
        throw new Error('Oklch values must be numbers');
    }
    // Convert L and C back to decimals
    var rawL = L / 100;
    var rawC = C / 100;
    // Normalize h to be between 0 and 360
    var normalizedH = ((h % 360) + 360) % 360;
    var hRadians = (normalizedH * Math.PI) / 180;
    var a = rawC * Math.cos(hRadians);
    var b = rawC * Math.sin(hRadians);
    var oklab = { L: rawL, a: a, b: b };
    return (0, oklab_1.oklabToRgb)(oklab);
}
