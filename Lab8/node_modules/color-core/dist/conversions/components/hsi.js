"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hsiToRgb = hsiToRgb;
exports.rgbToHsi = rgbToHsi;
/**
 * Converts HSI values to RGB color space.
 * @param {HSI} hsi - The HSI color to convert.
 * @returns {RGB} The color in RGB space.
 */
function hsiToRgb(hsi) {
    var _a, _b, _c, _d, _e, _f;
    var h = hsi.h;
    var s = hsi.s / 100;
    var i = hsi.i / 100;
    var hPrime = h / 60;
    var z = 1 - Math.abs(hPrime % 2 - 1);
    var chroma = 3 * i * s / (1 + z);
    var x = chroma * z;
    var r = 0, g = 0, b = 0;
    if (hPrime >= 0 && hPrime < 1) {
        _a = [chroma, x, 0], r = _a[0], g = _a[1], b = _a[2];
    }
    else if (hPrime >= 1 && hPrime < 2) {
        _b = [x, chroma, 0], r = _b[0], g = _b[1], b = _b[2];
    }
    else if (hPrime >= 2 && hPrime < 3) {
        _c = [0, chroma, x], r = _c[0], g = _c[1], b = _c[2];
    }
    else if (hPrime >= 3 && hPrime < 4) {
        _d = [0, x, chroma], r = _d[0], g = _d[1], b = _d[2];
    }
    else if (hPrime >= 4 && hPrime < 5) {
        _e = [x, 0, chroma], r = _e[0], g = _e[1], b = _e[2];
    }
    else if (hPrime >= 5 && hPrime < 6) {
        _f = [chroma, 0, x], r = _f[0], g = _f[1], b = _f[2];
    }
    var m = i * (1 - s);
    return {
        r: Math.round((r + m) * 255),
        g: Math.round((g + m) * 255),
        b: Math.round((b + m) * 255)
    };
}
/**
 * Converts RGB values to HSI color space.
 * @param {RGB} rgb - The RGB color to convert.
 * @returns {HSI} The color in HSI space.
 */
function rgbToHsi(rgb) {
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var i = (r + g + b) / 3;
    var s = i > 0 ? 1 - Math.min(r, g, b) / i : 0;
    var h = 0;
    if (s !== 0) {
        var numerator = 0.5 * ((r - g) + (r - b));
        var denominator = Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
        h = Math.acos(numerator / denominator);
        if (b > g) {
            h = 2 * Math.PI - h;
        }
        h *= 180 / Math.PI;
    }
    return { h: h, s: s * 100, i: i * 100 };
}
