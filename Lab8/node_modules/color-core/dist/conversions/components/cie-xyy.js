"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rgbToCIExyY = rgbToCIExyY;
exports.ciexyyToRgb = ciexyyToRgb;
var xyz_1 = require("./xyz");
/**
 * Converts RGB color to CIE xyY color space.
 * @param rgb The RGB color to convert.
 * @returns The color in CIE xyY color space (x and y in 0-1 range, Y in 0-100 range).
 */
function rgbToCIExyY(rgb) {
    var xyz = (0, xyz_1.rgbToXyz)(rgb);
    return xyzToCIExyY(xyz);
}
/**
 * Converts XYZ color to CIE xyY color space.
 * @param xyz The XYZ color to convert (in 0-1 range).
 * @returns The color in CIE xyY color space (x and y in 0-1 range, Y in 0-100 range).
 */
function xyzToCIExyY(xyz) {
    var x = xyz.x, y = xyz.y, z = xyz.z;
    var sum = x + y + z;
    if (sum === 0) {
        // Special case for black
        return { x: 0, y: 0, Y: 0 };
    }
    return {
        x: x / sum,
        y: y / sum,
        Y: y * 100 // Convert Y to 0-100 range
    };
}
/**
 * Converts CIE xyY color to RGB color space.
 * @param xyy The CIE xyY color to convert (x and y in 0-1 range, Y in 0-100 range).
 * @returns The color in RGB color space.
 */
function ciexyyToRgb(xyy) {
    var xyz = ciexyyToXyz(xyy);
    return (0, xyz_1.xyzToRgb)(xyz);
}
/**
 * Converts CIE xyY color to XYZ color space.
 * @param xyy The CIE xyY color to convert (x and y in 0-1 range, Y in 0-100 range).
 * @returns The color in XYZ color space (in 0-1 range).
 */
function ciexyyToXyz(xyy) {
    var x = xyy.x, y = xyy.y, Y = xyy.Y;
    if (y === 0) {
        // Special case for black
        return { x: 0, y: 0, z: 0, whitePoint: 'D65' };
    }
    var Y_normalized = Y / 100; // Convert Y back to 0-1 range
    return {
        x: (x * Y_normalized) / y,
        y: Y_normalized,
        z: ((1 - x - y) * Y_normalized) / y,
        whitePoint: 'D65'
    };
}
