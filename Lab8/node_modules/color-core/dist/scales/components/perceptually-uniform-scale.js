"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPerceptuallyUniformScale = createPerceptuallyUniformScale;
var color_1 = require("../../color");
var conversions_1 = require("../../conversions");
/**
 * Creates a perceptually uniform sequential color scale.
 *
 * This function generates a color scale where the perceived difference between each step is uniform.
 * It's crucial for accurate representation of data in visualizations.
 *
 * @param {Color} startColor - The starting color of the scale.
 * @param {Color} endColor - The ending color of the scale.
 * @param {number} steps - The number of colors to generate in the scale.
 * @returns {Color[]} An array of Color objects representing the perceptually uniform sequential scale.
 *
 * @example
 * const uniformScale = createPerceptuallyUniformScale(
 *   new Color('#ffffcc'),  // Light yellow
 *   new Color('#800026'),  // Dark red
 *   7
 * );
 * // Returns an array of 7 Color objects with perceptually uniform steps between light yellow and dark red
 */
function createPerceptuallyUniformScale(startColor, endColor, steps) {
    if (steps < 2) {
        throw new Error('Number of steps must be at least 2');
    }
    var startLab = (0, conversions_1.rgbToLab)(startColor.toRgb());
    var endLab = (0, conversions_1.rgbToLab)(endColor.toRgb());
    var scale = [];
    for (var i = 0; i < steps; i++) {
        var t = i / (steps - 1);
        var lab = {
            l: startLab.l + t * (endLab.l - startLab.l),
            a: startLab.a + t * (endLab.a - startLab.a),
            b: startLab.b + t * (endLab.b - startLab.b)
        };
        var rgb = (0, conversions_1.labToRgb)(lab);
        scale.push(new color_1.Color(rgb));
    }
    return scale;
}
